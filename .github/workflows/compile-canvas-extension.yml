name: Compile Canvas Extension for Vercel

on:
  workflow_dispatch: # Allow manual trigger
  push:
    paths:
      - "extend_canvas.cpp"
      - ".github/workflows/compile-canvas-extension.yml"

jobs:
  compile:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install OpenCV and dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            g++ \
            pkg-config \
            cmake \
            libjpeg-dev \
            libpng-dev \
            libtiff-dev \
            libwebp-dev \
            zlib1g-dev

      - name: Build OpenCV from source with minimal dependencies
        run: |
          echo "ðŸ”¨ Building OpenCV from source with minimal dependencies..."

          # Download OpenCV
          wget -O opencv.zip https://github.com/opencv/opencv/archive/4.8.0.zip
          unzip opencv.zip
          cd opencv-4.8.0

          # Create build directory
          mkdir build && cd build

          # Configure OpenCV with minimal dependencies
          cmake -D CMAKE_BUILD_TYPE=RELEASE \
                -D CMAKE_INSTALL_PREFIX=/usr/local \
                -D BUILD_SHARED_LIBS=OFF \
                -D BUILD_STATIC_LIBS=ON \
                -D WITH_TBB=OFF \
                -D WITH_OPENGL=OFF \
                -D WITH_OPENCL=OFF \
                -D WITH_IPP=OFF \
                -D WITH_ITT=OFF \
                -D BUILD_opencv_apps=OFF \
                -D BUILD_opencv_calib3d=OFF \
                -D BUILD_opencv_dnn=OFF \
                -D BUILD_opencv_features2d=OFF \
                -D BUILD_opencv_flann=OFF \
                -D BUILD_opencv_gapi=OFF \
                -D BUILD_opencv_highgui=OFF \
                -D BUILD_opencv_java_bindings_generator=OFF \
                -D BUILD_opencv_js=OFF \
                -D BUILD_opencv_ml=OFF \
                -D BUILD_opencv_objdetect=OFF \
                -D BUILD_opencv_photo=OFF \
                -D BUILD_opencv_python_bindings_generator=OFF \
                -D BUILD_opencv_stitching=OFF \
                -D BUILD_opencv_ts=OFF \
                -D BUILD_opencv_video=OFF \
                -D BUILD_opencv_videoio=OFF \
                -D BUILD_opencv_world=OFF \
                -D BUILD_TESTS=OFF \
                -D BUILD_PERF_TESTS=OFF \
                -D BUILD_EXAMPLES=OFF \
                -D INSTALL_PYTHON_EXAMPLES=OFF \
                -D INSTALL_C_EXAMPLES=OFF \
                -D OPENCV_ENABLE_NONFREE=OFF \
                ..

          # Build and install
          make -j$(nproc)
          sudo make install
          sudo ldconfig

          cd ../..

      - name: Compile canvas extension
        run: |
          echo "ðŸ”¨ Compiling extend_canvas for Linux with static OpenCV..."

          # Try static compilation with our custom OpenCV
          g++ -std=c++17 -O2 -Wall -static -o extend_canvas_linux extend_canvas.cpp \
            -I/usr/local/include/opencv4 \
            -L/usr/local/lib \
            -lopencv_core -lopencv_imgproc -lopencv_imgcodecs \
            -ljpeg -lpng -ltiff -lwebp -lz -lpthread -ldl

          echo "âœ… Compilation completed"
          ls -la extend_canvas_linux

          # Check what libraries it depends on
          echo "ðŸ“‹ Library dependencies:"
          ldd extend_canvas_linux || echo "Fully static binary (no dependencies)"

          # Check binary info
          echo "ðŸ“‹ Binary info:"
          file extend_canvas_linux

          # Test the binary
          ./extend_canvas_linux 2>&1 | head -5

      - name: Upload binary as artifact
        uses: actions/upload-artifact@v4
        with:
          name: extend_canvas_linux
          path: extend_canvas_linux
          retention-days: 30

      - name: Display download instructions
        run: |
          echo "ðŸŽ‰ Binary compiled successfully!"
          echo ""
          echo "ðŸ“¥ To use this binary in your project:"
          echo "1. Download the artifact from this workflow run"
          echo "2. Extract extend_canvas_linux from the zip"
          echo "3. Place it in your project root"
          echo "4. Commit and push: git add extend_canvas_linux && git commit -m 'Add Linux binary' && git push"
          echo ""
          echo "ðŸš€ The binary will then be available for Vercel deployment!"
